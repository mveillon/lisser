globals:
  # --------------------------------------------------------------------
  # CHANGE ME
  YEARLY_TAKE_HOME_PAY:
    # ... previous years up here
    "2024": 0   # how much you made in 2024, after taxes
    "2025": 0   # the same, but for 2025
    # ... future years down here
  # --------------------------------------------------------------------


  # --------------------------------------------------------------------
  # WEIRD CONFIGS
  # only change if you know what you're doing
  SANKEY_OTHER_THRESHOLD: 0.02
  PROJECTED_SPENDING_BILL_THRESHOLD: 100
  PROJECTED_SPENDING_LARGE_EXPENSE_THRESHOLD: 1000
  # --------------------------------------------------------------------


plots:
  # each of these will be its own .png image in the plots directory

  # --------------------------------------------------------------------
  food_over_time:   # name of the output image
    timeframe: yearly   # the time period of each plot
        # ^ Can be either monthly (4 samples per graph, 12 graphs per year) or yearly (12 samples per graph, one graph per year)
    title: "Money spent on food over time"  # title of plot
    
    # each of these will be its own line in the plot
    lines:
      # the first line
      - filters:
        - column: "Is Food"   # name of column to filter
          operator: "="   # how to filter
          value: 1  # what to compare against
              # above filter evaluate to "Is Food = 1" i.e. only purchases on food
        style: b
        label: total  # label of first line
        disjunction: False  # how to combine the filters, if there are multiple. True -> OR, False -> AND

      # the second line
      - filters:
        - column: "Is Food"
          operator: "="
          value: 1
        style: "g--"
        label: average  # label of second line

        # optional aggregation to perform on the Price, resulting in a flat control line.
        # note that the `column` key is not used here
        agg:
          func: mean
  # --------------------------------------------------------------------

  # --------------------------------------------------------------------
  bills_over_time:
    timeframe: yearly
    title: "Money spent on bills over time"
    lines:
      - filters:
        - column: Category
          operator: iequals
          value: Bills
        style: b
        label: bills
      - filters: []
        style: g
        label: total
  # --------------------------------------------------------------------

aggregations:
  # each of these will be a row in the aggregations.csv file

  # --------------------------------------------------------------------
  spent_on_groceries:  # what the key will be

    # of each of these will filter the data, just like with plots
    filters:
      - column: Category
        operator: "="
        value: Groceries
    
    # how we're going to aggregate the filtered data into one or a few numbers
    agg:
      column: Price  # what column to aggregate. Usually Price
      func: sum   # what function to perform on the column
  # --------------------------------------------------------------------

  # --------------------------------------------------------------------
  times_ate_out:
    filters:
      - column: Category
        operator: "="
        value: Eating Out

    agg:
      func: count # column key is not needed for the `count` function only
  # --------------------------------------------------------------------
