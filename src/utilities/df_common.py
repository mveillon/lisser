import numpy as np
import pandas as pd
from typing import Callable, Tuple, List, cast
from datetime import date

from src.utilities.helpers import get_months, get_weeks
from src.read_data.column import Column
from src.read_config.get_config import config_globals


def _group_df(
    df: pd.DataFrame, date_func: Callable[[date, date], List[date]]
) -> Tuple[List[date], List[pd.DataFrame]]:
    """
    Divides the df into as many chunks as are generated by `date_func`.

    Parameters:
        df (DataFrame): the Pandas DataFrame to divide
        date_func (Callable[[date, date], List[date]]): the function to call to
            generate the starting date of each chunk

    Returns:
        dates (List[dates]): the starting dates of each chunk
        partitions (List[DataFrame]): the list of partitions
    """
    if df.shape[0] == 0:
        return [], []

    dates = date_func(df[Column.DATE].min().date(), df[Column.DATE].max().date())
    partitions = []
    for i in range(len(dates) - 1):
        partitions.append(
            df.loc[
                (pd.to_datetime(df[Column.DATE]).dt.date >= dates[i])
                & (pd.to_datetime(df[Column.DATE]).dt.date < dates[i + 1])
            ]
        )

    partitions.append(df.loc[pd.to_datetime(df[Column.DATE]).dt.date >= dates[-1]])
    return dates, partitions


def group_by_week(df: pd.DataFrame) -> Tuple[List[date], List[pd.DataFrame]]:
    """
    Divides the DataFrame into week-size chunks.

    Parameters:
        df (DataFrame): the Pandas DataFrame to divide

    Returns:
        weeks (List[date]): the starting date of each group
        partitions (List[DataFrame]): a list of each chunk of df
    """
    return _group_df(df, get_weeks)


def group_by_month(df: pd.DataFrame) -> Tuple[List[date], List[pd.DataFrame]]:
    """
    Divides the DataFrame into month-size chunks.

    Parameters:
        df (DataFrame): the Pandas DataFrame to divide

    Returns:
        months (List[date]): the starting date of each group
        partitions (List[DataFrame]): a list of each chunk of df
    """
    return _group_df(df, get_months)


def filter_large_transactions(df: pd.DataFrame) -> Tuple[pd.DataFrame, float]:
    """
    Throws out outlier transactions that throw off certain calculations.

    Parameters:
        df (DataFrame): the Pandas DataFrame to filter

    Returns:
        df (DataFrame): the filtered DataFrame
        filtered_out (float): how much money was filtered out
    """
    thresh = config_globals()["PROJECTED_SPENDING_LARGE_EXPENSE_THRESHOLD"]
    if thresh == 0:
        thresh = np.inf
    return (
        df.loc[(df[Column.PRICE] < thresh) | (df[Column.CATEGORY] == "Bills")],
        cast(float, df.loc[df[Column.PRICE] >= thresh][Column.PRICE].sum()),
    )
